
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # packages
> library(ggplot2)
> library(tidyr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # ggplot2 settings, colors
> theme_set(theme_bw(base_size = 12))
> colpal <- c(
+   "#999999",
+   "#E69F00",
+   "#56B4E9",
+   "#009E73",
+   "#0072B2",
+   "#D55E00",
+   "#CC79A7",
+   "#F0E442"
+ )
> 
> 
> # functions
> # source("final_code/estimation.R")
> source("estimation.R")
Loading required package: isodistrreg
Loading required package: dfoptim
> 
> # data
> # data <- readRDS("final_code/house_price_data.rds")
> data <- readRDS("house_price_data.rds")
> y <- data$price
> x <- data.matrix(data[, colnames(data) != "price"])
> n <- nrow(data)
> 
> # fit distributional single index model
> dim <- fit_dim(y, x, m = 120, optimize = 2000)
================================================================================
> idr_fit <- idr(y = y, X = data.frame(index = x %*% dim$alpha))
> index_dim <- c(x %*% dim$alpha)
> n_grid <- 1001
> grid_index_dim <- seq(min(index_dim), max(index_dim), length.out = n_grid)
> cond_quants <- qpred(
+   predict(idr_fit, data = data.frame(index = grid_index_dim)),
+   quantiles = seq(0.1, 0.9, 0.2)
+ )
> 
> dim_df_points <- data.frame(
+   index = index_dim,
+   price = y,
+   method = "Distributional single index model"
+ )
> dim_df_quants <- data.frame(
+   index = grid_index_dim,
+   quantile = c(cond_quants),
+   tau = factor(rep(seq(0.1, 0.9, 0.2), each = n_grid)),
+   method = "Distributional single index model"
+ )
> 
> # fit single index model for the mean
> msim <- fit_msim(y, x, m = 120, optimize = 2000)
================================================================================
> index_msim <- c(x %*% msim$alpha)
> mono_fit <- isoreg(x = sort(index_msim), y = y[order(index_msim, -y)])
> 
> msim_df_points <- data.frame(
+   index = mono_fit$x,
+   price = mono_fit$y,
+   method = "Monotone single index model"
+ )
> 
> save(list = ls(), file = "house_price_application_tmp.rda")
> 
> ## code the fit as quantile with tau = 0.5 (for simplifying the plotting; the
> ## curve is an estimate of the conditional mean and not of the median!)
> msim_df_mean <- data.frame(
+   index = mono_fit$x,
+   quantile = mono_fit$yf,
+   tau = 0.5,
+   method = "Monotone single index model"
+ )
> 
> # get data for quantile model
> # quantile_data <- readRDS("final_code/single_index_quantile_data.rds")
> quantile_data <- readRDS("single_index_quantile_data.rds")
> quantile_df_points <- data.frame(
+   index = quantile_data[, 7],
+   price = quantile_data[, 6] + mean(y),
+   method = "Non-crossing quantile regression"
+ )
> quantile_df_quants <- data.frame(
+   index = quantile_data[, 7],
+   quantile = c(quantile_data[, -c(6, 7)]) + mean(y),
+   tau = factor(rep(seq(0.1, 0.9, 0.2), each = n)),
+   method = "Non-crossing quantile regression"
+ )
> 
> # combine data, plot
> points_df <- rbind(dim_df_points, msim_df_points, quantile_df_points)
> quants_df <- rbind(dim_df_quants, msim_df_mean, quantile_df_quants)
> 
> quantiles_plot <- ggplot() +
+   geom_point(
+     data = points_df,
+     aes(x = index, y = price)
+   ) + 
+   geom_line(
+     data = quants_df,
+     aes(x = index, y = quantile, color = tau, group = tau),
+     lwd = 0.9
+   ) +
+   scale_color_manual(values = colpal[1:5]) +
+   facet_wrap(.~method, scales = "free_x") +
+   theme(legend.position = "none") +
+   labs(x = "Index", y = "Price")
> 
> pdf(file = "house_price_plot.pdf", width = 8, height = 3)
> print(quantiles_plot)
> dev.off()
null device 
          1 
> 
> # numbers in the text
> ncqr9 <- c(1, -0.395, 6.489, -0.026)
> round(setNames(ncqr9 / sqrt(sum(ncqr9^2)), colnames(x)), 3)
   number_stores        house_age transaction_date     distance_mrt 
           0.152           -0.060            0.987           -0.004 
> round(setNames(dim$alpha, colnames(x)), 3)
   number_stores        house_age transaction_date     distance_mrt 
           0.706           -0.263            0.658           -0.013 
> round(setNames(msim$alpha, colnames(x)), 3)
   number_stores        house_age transaction_date     distance_mrt 
           0.415           -0.122            0.902           -0.006 
> round(cor(quantile_data[, 7], index_dim, method = "spearman"), 2)
[1] 0.99
> round(cor(index_msim, index_dim, method = "spearman"), 2)
[1] 1
> round(cor(quantile_data[, 7], index_msim, method = "spearman"), 2)
[1] 0.99
> 
> proc.time()
     user    system   elapsed 
39815.050    23.781 39850.761 
